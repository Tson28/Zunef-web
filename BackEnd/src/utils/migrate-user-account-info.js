const mongoose = require('mongoose');
const Payment = require('../models/payment.model');
const Account = require('../models/account.model');
const UserAccountInfo = require('../models/userAccountInfo.model');
require('dotenv').config();

// Script ƒë·ªÉ migrate d·ªØ li·ªáu UserAccountInfo cho c√°c ƒë∆°n h√†ng ƒë√£ thanh to√°n
async function migrateUserAccountInfo() {
    try {
        // K·∫øt n·ªëi database
        await mongoose.connect(process.env.MONGODB_URL);
        console.log('Connected to database');
        
        // L·∫•y t·∫•t c·∫£ payments ƒë√£ th√†nh c√¥ng (completed ho·∫∑c success)
        const successfulPayments = await Payment.find({ 
            status: { $in: ['success', 'completed'] } 
        });
        console.log(`Found ${successfulPayments.length} successful payments`);
        
        let createdCount = 0;
        let skippedCount = 0;
        
        for (const payment of successfulPayments) {
            for (const item of payment.items) {
                // T·ª± ƒë·ªông x√°c ƒë·ªãnh productType n·∫øu ch∆∞a c√≥
                let productType = item.productType;
                if (!productType) {
                    // Ki·ªÉm tra trong Account collection
                    const account = await Account.findById(item.productId);
                    if (account) {
                        productType = 'account';
                    } else {
                        productType = 'source-code';
                    }
                }
                
                // Ki·ªÉm tra xem item c√≥ ph·∫£i l√† account product kh√¥ng
                if (productType === 'account') {
                    // Ki·ªÉm tra xem ƒë√£ c√≥ UserAccountInfo ch∆∞a
                    const existingInfo = await UserAccountInfo.findOne({
                        userId: payment.userId,
                        orderId: payment.orderId,
                        productId: item.productId
                    });
                    
                    if (!existingInfo) {
                        // L·∫•y th√¥ng tin product
                        const account = await Account.findById(item.productId);
                        if (account) {
                            // T·∫°o UserAccountInfo record
                            const userAccountInfo = await UserAccountInfo.createFromOrder({
                                userId: payment.userId,
                                orderId: payment.orderId,
                                productId: item.productId,
                                productName: item.productName || account.name
                            });
                            
                            console.log(`‚úÖ Created UserAccountInfo for order ${payment.orderId}, product ${account.name}`);
                            createdCount++;
                        }
                    } else {
                        console.log(`‚è≠Ô∏è  Skipped order ${payment.orderId}, UserAccountInfo already exists`);
                        skippedCount++;
                    }
                }
            }
        }
        
        console.log(`\nüéâ Migration completed!`);
        console.log(`üìä Created: ${createdCount} records`);
        console.log(`‚è≠Ô∏è  Skipped: ${skippedCount} records`);
        
    } catch (error) {
        console.error('‚ùå Migration error:', error);
    } finally {
        await mongoose.disconnect();
        console.log('Disconnected from database');
    }
}

// Ch·∫°y migration
if (require.main === module) {
    migrateUserAccountInfo();
}

module.exports = migrateUserAccountInfo;